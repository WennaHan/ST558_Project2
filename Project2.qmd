---
title: "draft2"
format: html
editor: visual
---

# Interacting with APIs: Example with the CoinGecko API.

## Wenna Han 07/08/2024

### Overview of CoinGecko API

Started in 2014, **CoinGecko** is the world's largest independent crypto data aggregator that is integrated with more than 900 crypto exchanges and lists more than 12,000 coins. CoinGecko API offers the most comprehensive and reliable crypto market data through RESTful JSON endpoints.

### Required Packages

To use the functions for interacting with the CoinGecko API, I used the following packages:

```{r}
# Load necessary libraries
library(httr)      # For making HTTP requests
library(jsonlite)  # For handling JSON data
library(dplyr)     # For data manipulation and summarization
library(tidyr)     # For data tidying
library(knitr)     # For generating reports
library(ggplot2)   # For data visualization
library(reshape)   # For data visualization
library(shiny)     # For app built
```

## Data Download Tab/API functions

First, I want to contact the CoinGecko API and query different API endpoints. One queries the **current market data** for Cryptocurrencies. Another queries the **historical market data** for a Cryptocurrency.

### Function 1: get_coin_data

This function fetches current market data for cryptocurrencies from CoinGecko's API. Users can specify:

-   vs_currency: Target currency for market data (default is "usd").
-   order: Order of results (e.g., by market capitalization).
-   per_page: Number of coins per page (max is 250).

```{r}
# Define the function to fetch coins data from CoinGecko API
get_coin_data <- function(vs_currency = "usd", 
                          order = "market_cap_desc", 
                          per_page = 100) {
  
  # Set the base url, endpoint, and combine them for the full url.
  baseURL <- "https://api.coingecko.com/api/v3/"
  endpoint <- "coins/markets"
  fullURL <- paste0(baseURL, endpoint)
  
  # Parameters for the API call
  params <- list(
    vs_currency = vs_currency,
    order = order,
    per_page = per_page,
    sparkline = "false"
  )
  
  # Fetch data from the API
  response <- GET(fullURL, query = params)
  
  # Check for a successful response
  if (response$status_code != 200) {
    stop("Failed to fetch data from CoinGecko API")
  }
  
  # Parse the response JSON
  data <- fromJSON(content(response, as = "text"))
  
  # Convert to a data frame
  df <- as.data.frame(data)
  
  return(df)
}

# Example usage 1: default
df <- get_coin_data(vs_currency = "usd", 
                    order = "market_cap_desc", 
                    per_page = 100)
head(df)

# Example usage 2: customized - Currency and Sorting Order
df_custom <- get_coin_data(vs_currency = "eur", 
                           order = "volume_desc", 
                           per_page = 50)
head(df_custom)

# Example usage 3: customized - Retrieve More Coins
df_more_coins <- get_coin_data(per_page = 200)
head(df_more_coins)
```

### Function 2: get_historical_market_data

This function retrieves historical market data for a specific cryptocurrency:

- crypto_id: Cryptocurrency ID (e.g., "bitcoin", "ethereum").
- vs_currency: Currency for comparison (default is "usd").
- days: Number of days of historical data.

```{r}
# Create a function to get historical market data for a specific cryptocurrency, allowing customization of the cryptocurrency ID and the number of days of historical data.
# The default cryptocurrency is bitcoin.
# The default comparing currency is US dollar.
# The default the number of days of historical data is 30 days.
get_historical_market_data <- function(crypto_id = 'bitcoin',
                                       vs_currency = 'usd', 
                                       days = 30) {
  # Set the url with endpoint.
  baseURL <- "https://api.coingecko.com/api/v3/"
  fullURL <- paste0(baseURL, 'coins/', crypto_id, '/market_chart')
  
  # Parameters for the API call
  params <- list( vs_currency = vs_currency,
                  days = days)
  
  response <- GET(fullURL, query = params)
  data <- fromJSON(content(response, as = "text"), flatten = TRUE)
  
  # Extracts prices and volumes, converts timestamps, and merges them into a single data frame.
  prices <- data$prices
  df_prices <- data.frame(timestamp = as.POSIXct(prices[, 1] / 1000, 
                                                 origin = '1970-01-01'), 
                          price = prices[, 2])
  
  volumes <- data$total_volumes
  df_volumes <- data.frame(timestamp = as.POSIXct(volumes[, 1] / 1000, 
                                                  origin = '1970-01-01'), 
                           volume = volumes[, 2])
  
  market_data <- merge(df_prices, df_volumes, by = 'timestamp')
  colnames(market_data) <- c('timestamp', 'price', 'volume')
  
  return(market_data)
}

# Example usage 1: default - Bitcoin for the last 30 days
historical_data_bitcoin <- get_historical_market_data(crypto_id = 'bitcoin',
                                              vs_currency = 'usd', 
                                              days = 30)
head(historical_data_bitcoin)

# Example usage 2: customized - ethereum for the last 20 days
historical_data_ethereum <- get_historical_market_data(crypto_id = 'ethereum',
                                              vs_currency = 'usd', 
                                              days = 20)
head(historical_data_ethereum)

# Example usage 3: customized - tether for the last 30 days compare with EUR
historical_data_tether <- get_historical_market_data(crypto_id = 'tether',
                                              vs_currency = 'eur', 
                                              days = 30)
head(historical_data_tether)
```

## Data Summarization and Analysis

After fetching data, I summarized the data:

I created a new price change category variable (price_change_category) based on the price change percentage in 24h (price_change_percentage_24h), then, created two contingency table. First contingency table shows the count of coins by its price change. The results show that 2 got lower price, 13 stay in stable, and 85 got higher prce within last day. It shows overall cryptocurrencies are more valued by consumers.Second contingency table shows the price change for each coin to provide more details. The third table shows the price change for coins by their market capitalization rank. It shows the top valued coins gaining more values in the last day.

```{r}
# Create a new categorical variable for price change categories
# based on the df data (default parameters)
df <- df |>
  mutate(price_change_category = cut(price_change_percentage_24h, 
                                     breaks = c(-Inf, -10, -1, 1, 10, Inf), 
                                     labels = c("Very Negative", 
                                                "Negative", 
                                                "Stable", 
                                                "Positive", 
                                                "Very Positive")))

# Contingency table count of coins by price change category
Count_price_change <- table(df$price_change_category)
head(Count_price_change)

# Contingency table for id by price change category
id_by_price_change <- table(df$id, df$price_change_category)
head(id_by_price_change)

# Contingency table for market cap rank and price change category
price_change_by_market_cap_rank <- table(df$market_cap_rank, df$price_change_category)
head(price_change_by_market_cap_rank)
```

## Summarize numerical data

```{r}
# Summary statistics for current price by price change category
price_summary <- df |>
  group_by(price_change_category) |>
  summarise(
    count = n(),
    mean_price = mean(current_price, na.rm = TRUE),
    median_price = median(current_price, na.rm = TRUE),
    sd_price = sd(current_price, na.rm = TRUE)
  )
print(price_summary)

# Summary statistics for market cap by price change category
market_cap_summary <- df |>
  group_by(price_change_category) |>
  summarise(
    count = n(),
    mean_market_cap = mean(market_cap, na.rm = TRUE),
    median_market_cap = median(market_cap, na.rm = TRUE),
    sd_market_cap = sd(market_cap, na.rm = TRUE)
  )
print(market_cap_summary)
```

## Plots

### Histogram of Market Capitalization

This histogram provides a distribution of market capitalizations across cryptocurrencies. It uses a logarithmic scale on the y-axis for better visualization of the frequency of different market capitalization ranges.

```{r}
ggplot(df, aes(x = market_cap)) +
  geom_histogram(bins = 50, fill = "blue", color = "black") +
  scale_y_log10() +
  ggtitle("Histogram of Market Capitalization") +
  xlab("Market Capitalization (USD)") +
  ylab("Frequency") +
  theme_minimal()
```

### Scatter Plot for Market Cap vs. Trading Volume

This scatter plot visualizes the relationship between market capitalization and trading volume for cryptocurrencies, colored by their price change category. Logarithmic scales are applied to both axes to handle the wide range of values typically seen in cryptocurrency markets.

```{r}
# Scatter Plot for Market Cap vs. Trading Volume
ggplot(df, aes(x = market_cap, y = total_volume, color = price_change_category)) +
  geom_point() +
  scale_x_log10() +
  scale_y_log10() +
  ggtitle("Market Cap vs. Trading Volume by Price Change Category") +
  xlab("Market Capitalization (USD)") +
  ylab("Total Volume (USD)") +
  theme_minimal() +
  scale_color_brewer(palette = "Set1")
```

### Box Plot for Price Change Percentage

This box plot categorizes cryptocurrencies based on their price change percentages over a 24-hour period. It helps visualize the distribution of price changes across different categories.

```{r}
# Box Plot for Price Change Percentage
ggplot(df, aes(x = price_change_category, y = price_change_percentage_24h, fill = price_change_category)) +
  geom_boxplot() +
  ggtitle("Box Plot of Price Change Percentage by Category") +
  xlab("Price Change Category") +
  ylab("Price Change Percentage (24h)") +
  theme_minimal() +
  scale_fill_brewer(palette = "Set1")
```

### Heatmap of Correlations Between Numerical Variables

This heatmap displays the correlation matrix among selected numerical variables related to cryptocurrencies, including current price, market capitalization, trading volume, and price change percentages. It helps identify potential relationships and dependencies between these variables.

```{r}
# Select numeric columns for the heatmap
numeric_cols <- df |>
  select(current_price, market_cap, total_volume, price_change_percentage_24h, 
         market_cap_change_percentage_24h, circulating_supply, total_supply)

# Calculate the correlation matrix
cor_matrix <- round(cor(numeric_cols, use = "complete.obs"), 2)

# Melt the correlation matrix for ggplot
melted_cor_matrix <- melt(cor_matrix)

# Create the heatmap
heatmap_plot <- ggplot(data = melted_cor_matrix, aes(x = X1, y = X2, fill = value)) +
  geom_tile(color = "white") +
  scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, limit = c(-1, 1), space = "Lab", 
                       name = "Correlation") +
  theme_minimal() + 
  theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 12, hjust = 1)) +
  coord_fixed() +
  ggtitle("Heatmap of Correlations Between Numerical Variables") +
  xlab("Variables") +
  ylab("Variables")

# Print the heatmap
print(heatmap_plot)
```

### Coin Price Trend Plot

This plot shows the historical price trend of Bitcoin over a specified period (default is the last 30 days). It includes a line plot of daily prices and individual data points for clarity and trend visualization.

```{r}
# Create the plot
price_trend_plot <- ggplot(data = historical_data_bitcoin, 
               aes(x = timestamp, y = price)) +
  geom_line(color = "blue") +
  geom_point(color = "red") +
  labs(title = "Bitcoin Price Trend",
       x = "Timestamp",
       y = "Price (USD)") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
        axis.title.x = element_text(size = 12),
        axis.title.y = element_text(size = 12))

# Print the plot
print(price_trend_plot)
```


